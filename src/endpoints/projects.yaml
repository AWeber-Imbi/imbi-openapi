paths:
  collection:
    get:
      description: Retrieve the collection of projects
      summary: Get Collection
      tags: [Projects]
      parameters:
        - name: namespace_id
          in: query
          description: Filter by Namespace ID
          schema:
            type: integer
        - name: project_type_id
          in: query
          description: Filter by Namespace ID
          schema:
            type: integer
        - name: name
          in: query
          description: Filter by Name
          schema:
            type: string
        - name: include_archived
          in: query
          description: Set to `true` to include archived values
          schema:
            type: boolean
        - name: sonarqube_project_key
          in: query
          description: Filter by SonarQube Project Key
          schema:
            type: string
        - name: sort
          in: query
          description: |-
            A comma delimited filter of column and sort direction.

            **Valid Sort Columns**

              - `namespace`
              - `project_type`
              - `name`
              - `project_score`

            **Valid Directions**

              - `asc`
              - `desc`

            **Example Value**

              `namespace asc, name desc`
          schema:
            type: string
        - name: limit
          in: query
          description: Limit the number of records returned
          schema:
            type: number
        - name: offset
          in: query
          description: The starting offset for the records returned
          schema:
            type: number
      responses:
        '200':
          description: Success
          headers:
            Cache-Control: { $ref: '../components/headers.yaml#/Cache-Control' }
          content:
            application/json: &responseContent
              schema:
                type: array
                items:
                  $ref: '../schemas/project.yaml#/read'
              example:
                records:
                  summary: Multiple project records
                  value:
                    - id: 1
                      created_by: test_user
                      last_modified_by: ~
                      namespace_id: 1
                      namespace: Applications
                      project_type_id: 1
                      project_type: HTTP API
                      name: User Service
                      slug: user
                      description: |-
                        The user service is used to manage user specific data, including profiles and content.
                      environments:
                        - Testing
                        - Staging
                        - Production
                      archived: false
            application/msgpack:
              <<: *responseContent
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }

    post:
      summary: Create Record
      description: Create a new project record
      tags: [Projects]
      requestBody:
        description: The project record to create
        content:
          application/json: &postContent
            schema:
              $ref: '../schemas/project.yaml#/write'
            example:
              record:
                $ref: '#/components/examples/write'
          application/msgpack:
            <<: *postContent
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '400': { $ref: '../components/responses.yaml#/RequestError' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '409': { $ref: '../components/responses.yaml#/Conflict' }
  manage:
    get:
      summary: Get Record
      description: Retrieve a project record
      tags: [Projects]
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    patch:
      summary: Update Record
      description: >-
        Update a project, providing a JSON Patch (RFC-6209) payload of update
        operations to apply.
      tags: [Projects]
      requestBody:
        description: JSON Patch Payload
        content:
          application/json: &patchContent
            schema:
              $ref: '../components/schemas.yaml#/jsonPatch'
          application/msgpack:
            <<: *patchContent
          application/json-patch+json:
            <<: *patchContent
          application/json-patch+msgpack:
            <<: *patchContent
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '304': { $ref: '../components/responses.yaml#/NoChanges' }
        '400': { $ref: '../components/responses.yaml#/RequestError' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
        '409': { $ref: '../components/responses.yaml#/Conflict' }
    delete:
      summary: Delete Record
      description: Remove a project record and all of its children
      tags: [Projects]
      responses:
        '204': { $ref: '../components/responses.yaml#/RecordRemoved' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    parameters:
      - name: id
        in: path
        description: Project ID
        required: true
        schema:
          type: number

components:
  examples:
    read:
      summary: An example of a project record
      value:
        id: 1
        created_by: test_user
        last_modified_by: ~
        namespace_id: 1
        namespace: User Experience
        project_type_id: 1
        project_type: HTTP API
        name: User Service
        slug: user
        description: |-
          The user service is used to manage user specific data, including profiles and content.
        environments:
          - Testing
          - Staging
          - Production
        archived: false
    write:
      summary: An example of the payload for creating a record
      value:
        namespace_id: 1
        name: User Service
        slug: user
        description: |-
          The user service is used to manage user specific data, including profiles and content.
        project_type_id: 1
        environments:
          - Testing
          - Staging
          - Production
  responses:
    Success:
      description: The request to create, update, or retrieve the project was successful
      headers:
        Cache-Control: { $ref: '../components/headers.yaml#/Cache-Control' }
        Last-Modified: { $ref: '../components/headers.yaml#/Last-Modified' }
        Link: { $ref: '../components/headers.yaml#/Link' }
      content:
        application/json: &responsesSuccess
          schema:
            $ref: '../schemas/project.yaml#/read'
          example:
            record:
              $ref: '#/components/examples/read'
        application/msgpack:
          <<: *responsesSuccess
