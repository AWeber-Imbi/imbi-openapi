paths:
  collection:
    get:
      description: Retrieve the collection of URLs for a project
      summary: Get Collection
      tags: [Project URLs]
      responses:
        '200':
          description: Success
          headers:
            Cache-Control: { $ref: '../components/headers.yaml#/Cache-Control' }
          content:
            application/json: &responseContent
              schema:
                type: array
                items:
                  $ref: '../schemas/project_url.yaml#/read'
              example:
                records:
                  summary: Multiple group records
                  value:
                    - project_id: 1
                      environment: Production
                      created_by: test_user
                      last_modified_by: ~
                      url: https://imbi.service.production.consul
                    - project_id: 1
                      environment: Staging
                      created_by: test_user
                      last_modified_by: ~
                      url: https://imbi.service.staging.consul
                    - project_id: 1
                      environment: Testing
                      created_by: test_user
                      last_modified_by: ~
                      url: https://imbi.service.testing.consul
            application/msgpack:
              <<: *responseContent
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
    post:
      summary: Create Record
      description: Create a new project URL record
      tags: [Project URLs]
      requestBody:
        description: The project URL record to create
        content:
          application/json: &postContent
            schema:
              $ref: '../schemas/project_url.yaml#/write'
            example:
              record:
                $ref: '#/components/examples/write'
          application/msgpack:
            <<: *postContent
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '400': { $ref: '../components/responses.yaml#/RequestError' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '409': { $ref: '../components/responses.yaml#/Conflict' }
    parameters:
      - name: id
        in: path
        description: The Project ID
        required: true
        schema:
          type: number
  manage:
    get:
      summary: Get Record
      description: Retrieve a project URL record
      tags: [Project URLs]
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    patch:
      summary: Update Record
      description: >-
        Update a project URL, providing a JSON Patch (RFC-6209) payload of update
        operations to apply.
      tags: [Project URLs]
      requestBody:
        description: JSON Patch Payload
        content:
          application/json: &patchContent
            schema:
              $ref: '../components/schemas.yaml#/jsonPatch'
          application/msgpack:
            <<: *patchContent
          application/json-patch+json:
            <<: *patchContent
          application/json-patch+msgpack:
            <<: *patchContent
      responses:
        '200': { $ref: '#/components/responses/Success' }
        '304': { $ref: '../components/responses.yaml#/NoChanges' }
        '400': { $ref: '../components/responses.yaml#/RequestError' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
        '409': { $ref: '../components/responses.yaml#/Conflict' }
    delete:
      summary: Delete Record
      description: Remove a project URL record
      tags: [Project URLs]
      responses:
        '204': { $ref: '../components/responses.yaml#/RecordRemoved' }
        '401': { $ref: '../components/responses.yaml#/Unauthorized' }
        '404': { $ref: '../components/responses.yaml#/NotFound' }
    parameters:
      - name: id
        in: path
        description: Project ID for the URL
        required: true
        schema:
          type: number
      - name: environment
        in: path
        description: The environment the URL is for
        required: true
        schema:
          type: string

components:
  examples:
    read:
      summary: A project URL record
      value:
        project_id: 1
        created_by: test_user
        last_modified_by: ~
        url: https://imbi.service.produciton.consul
    write:
      summary: A project URL record
      value:
        project_id: 1
        environment: Production
        url: https://imbi.service.produciton.consul

  responses:
    Success:
      description: The request to create, update, or retrieve the project URL was successful
      headers:
        Cache-Control: { $ref: '../components/headers.yaml#/Cache-Control' }
        Last-Modified: { $ref: '../components/headers.yaml#/Last-Modified' }
        Link: { $ref: '../components/headers.yaml#/Link' }
      content:
        application/json: &responsesSuccess
          schema:
            $ref: '../schemas/project_url.yaml#/read'
          example:
            record:
              $ref: '#/components/examples/read'
        application/msgpack:
          <<: *responsesSuccess
